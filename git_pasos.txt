Vamos a la terminal, y en la carpeta del proyecto escribimos "git init"

Escribimos "git status" para ver el estado de los archivos

Con "git add nomrearchivo" agregamos un archivo a la zona de espera
Si tenemos varios archivos escribimos "git add ." para agregarlos todos
Sino vamos a las pestaña Source Control de VScode, opciones y apretamos "stage all changes"
    y veremos que los archivos pasan de tener una U a una A

VIENDO LA PESTAÑA SOURCE CONTROL PODEMOS HACER TODOS ESTOS MOVIMIENTOS

Si se modifica un archivo, tendrá el tag de M (modificado). Una vez modificado
    podremos darle git add para agregarlo o git restore para descartar los cambios

Para hacer un primer commit primero debemos logearnos.

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

Ahora hacemos un "git commit". En este momento se abre un editor de texto.
    Escribimos una descripción asociada al commit en la primer linea del archivo,
    guardamos el archivo y lo cerramos. Automaticamente la terminal nos dice que se hizo
    el commit para la 'rama master'. Si damos un status, nos dice que no hay nada para
    hacer commit y que la rama master esta limpia.
Sino podemos escribir git commit -m "Descripción del commit" (usar las comillas)

Ahora que el commit está hecho, el archivo está guardado y con una marca.
Si modificamos algun archivo nos aparecerá nuevamente en la zona de espera
    para ser agregado (add) y commiteado (commit).

Si el archivo está modificado pero NO agregado (sin add), podemos escribir
    "git checkout -- nombrearchivo" y git nos borrará todos los cambios
    y nos dejará el archivo como fue commiteado la ultima vez

También podemos ver las diferencias entre el archivo modificado y el del ultimo
    commit con "git diff nombrearchivo". las lineas con "-" son las borradas
    y las lineas con "+" son las agregadas.

Podemos acceder al logs de commits escribiendo "git log" y veremos todos
    los commits desde el ultimo hasta el primero, con sus autores y fecha
    tambien nos dice en que rama o HEAD se hicieron los commit

Si tenemos archivos o carpetas que no queremos que git vea o analice, como por ejemplo
    para hacer pruebas o tests, debemos crear un archivo que se llame ".gitignore" en
    la carpeta raiz. Abrimos este archivo y escribimos las direcciones que queremos
    que git no analice.

Si queremos desarrollar una version alternativa del programa podemos crear una nueva rama
    en donde todo lo que hagamos no modificará a la rama inicial. Escribiendo "git branch"
    veremos una lista de las ramas y en cual estamos actualmente